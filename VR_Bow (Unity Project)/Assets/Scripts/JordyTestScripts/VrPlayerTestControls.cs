//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.0
//     from Assets/Scripts/JordyTestScripts/VrPlayerTestControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @VrPlayerTestControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @VrPlayerTestControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""VrPlayerTestControls"",
    ""maps"": [
        {
            ""name"": ""VrPlayerController"",
            ""id"": ""9de5a3d8-733b-4427-b4f9-9c147c779994"",
            ""actions"": [
                {
                    ""name"": ""Flex"",
                    ""type"": ""Value"",
                    ""id"": ""218c3e7e-4e19-4fc4-bec3-ed82671f450f"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SetMin"",
                    ""type"": ""Button"",
                    ""id"": ""eafe1385-2ade-4b87-801c-29d009d2efca"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SetMax"",
                    ""type"": ""Button"",
                    ""id"": ""aad581d0-bacf-443d-ae71-06499e956d95"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""54fd7c9a-7815-472f-8e5a-e7d46793ba13"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightTrigger"",
                    ""type"": ""Button"",
                    ""id"": ""2c3ee293-566a-4cdc-b832-1ddf1f18c1b5"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""b781502e-3958-4bd8-b657-451fab7ef645"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Flex"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""ed25dc58-9e46-4e51-a24e-eed1716db2d4"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Flex"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""a686cdb4-b37b-426e-87ed-a57826d4eb66"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Flex"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""11134f52-ead8-403f-b2d7-250ff763f337"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SetMin"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6580f8c4-b7fa-47c2-92bf-6867160d957d"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SetMax"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ef6c7a39-944f-4ea6-9f20-a0148ff6ff20"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5130d5e9-a95d-464f-8654-a7b4c750403e"",
                    ""path"": ""<OculusTouchController>{RightHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightTrigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // VrPlayerController
        m_VrPlayerController = asset.FindActionMap("VrPlayerController", throwIfNotFound: true);
        m_VrPlayerController_Flex = m_VrPlayerController.FindAction("Flex", throwIfNotFound: true);
        m_VrPlayerController_SetMin = m_VrPlayerController.FindAction("SetMin", throwIfNotFound: true);
        m_VrPlayerController_SetMax = m_VrPlayerController.FindAction("SetMax", throwIfNotFound: true);
        m_VrPlayerController_Shoot = m_VrPlayerController.FindAction("Shoot", throwIfNotFound: true);
        m_VrPlayerController_RightTrigger = m_VrPlayerController.FindAction("RightTrigger", throwIfNotFound: true);
    }

    ~@VrPlayerTestControls()
    {
        UnityEngine.Debug.Assert(!m_VrPlayerController.enabled, "This will cause a leak and performance issues, VrPlayerTestControls.VrPlayerController.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // VrPlayerController
    private readonly InputActionMap m_VrPlayerController;
    private List<IVrPlayerControllerActions> m_VrPlayerControllerActionsCallbackInterfaces = new List<IVrPlayerControllerActions>();
    private readonly InputAction m_VrPlayerController_Flex;
    private readonly InputAction m_VrPlayerController_SetMin;
    private readonly InputAction m_VrPlayerController_SetMax;
    private readonly InputAction m_VrPlayerController_Shoot;
    private readonly InputAction m_VrPlayerController_RightTrigger;
    public struct VrPlayerControllerActions
    {
        private @VrPlayerTestControls m_Wrapper;
        public VrPlayerControllerActions(@VrPlayerTestControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Flex => m_Wrapper.m_VrPlayerController_Flex;
        public InputAction @SetMin => m_Wrapper.m_VrPlayerController_SetMin;
        public InputAction @SetMax => m_Wrapper.m_VrPlayerController_SetMax;
        public InputAction @Shoot => m_Wrapper.m_VrPlayerController_Shoot;
        public InputAction @RightTrigger => m_Wrapper.m_VrPlayerController_RightTrigger;
        public InputActionMap Get() { return m_Wrapper.m_VrPlayerController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(VrPlayerControllerActions set) { return set.Get(); }
        public void AddCallbacks(IVrPlayerControllerActions instance)
        {
            if (instance == null || m_Wrapper.m_VrPlayerControllerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_VrPlayerControllerActionsCallbackInterfaces.Add(instance);
            @Flex.started += instance.OnFlex;
            @Flex.performed += instance.OnFlex;
            @Flex.canceled += instance.OnFlex;
            @SetMin.started += instance.OnSetMin;
            @SetMin.performed += instance.OnSetMin;
            @SetMin.canceled += instance.OnSetMin;
            @SetMax.started += instance.OnSetMax;
            @SetMax.performed += instance.OnSetMax;
            @SetMax.canceled += instance.OnSetMax;
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
            @RightTrigger.started += instance.OnRightTrigger;
            @RightTrigger.performed += instance.OnRightTrigger;
            @RightTrigger.canceled += instance.OnRightTrigger;
        }

        private void UnregisterCallbacks(IVrPlayerControllerActions instance)
        {
            @Flex.started -= instance.OnFlex;
            @Flex.performed -= instance.OnFlex;
            @Flex.canceled -= instance.OnFlex;
            @SetMin.started -= instance.OnSetMin;
            @SetMin.performed -= instance.OnSetMin;
            @SetMin.canceled -= instance.OnSetMin;
            @SetMax.started -= instance.OnSetMax;
            @SetMax.performed -= instance.OnSetMax;
            @SetMax.canceled -= instance.OnSetMax;
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
            @RightTrigger.started -= instance.OnRightTrigger;
            @RightTrigger.performed -= instance.OnRightTrigger;
            @RightTrigger.canceled -= instance.OnRightTrigger;
        }

        public void RemoveCallbacks(IVrPlayerControllerActions instance)
        {
            if (m_Wrapper.m_VrPlayerControllerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IVrPlayerControllerActions instance)
        {
            foreach (var item in m_Wrapper.m_VrPlayerControllerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_VrPlayerControllerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public VrPlayerControllerActions @VrPlayerController => new VrPlayerControllerActions(this);
    public interface IVrPlayerControllerActions
    {
        void OnFlex(InputAction.CallbackContext context);
        void OnSetMin(InputAction.CallbackContext context);
        void OnSetMax(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnRightTrigger(InputAction.CallbackContext context);
    }
}
